[build-system]
requires = [
  "setuptools >= 65.0.0",
]
build-backend = "backend"
backend-path = ["pep517build"]

[project]
name = "gajim"
description = "A GTK XMPP Client"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Philipp HÃ¶rist", email = "philipp@hoerist.com"},
    {name = "Yann Leboulanger", email = "yann@leboulanger.org"},
]
keywords = ["chat", "messaging", "im", "xmpp", "voip"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: X11 Applications :: GTK",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Topic :: Communications :: Chat",
]
dependencies = [
  "cryptography>=3.4.8",
  "css-parser",
  "emoji>=2.6.0",
  "keyring",
  "nbxmpp>=5.0.1,<6.0.0",
  "omemo-dr>=1.0.0,<2.0.0",
  "packaging",
  "pillow>=9.1.0",
  "precis-i18n>=1.0.0",
  "pycairo>=1.16.0",
  "PyGObject>=3.42.0",
  "qrcode>=7.3.1",
  "SQLAlchemy>=2.0.0",
  "winrt-Windows.Foundation; platform_system == 'Windows'",
  "winrt-Windows.UI; platform_system == 'Windows'",
  "winrt-Windows.UI.ViewManagement; platform_system == 'Windows'",
  "windows-toasts; platform_system == 'Windows'",
]
dynamic = ["version"]

[project.urls]
homepage = "https://gajim.org"
repository = "https://dev.gajim.org/gajim/gajim"

[project.optional-dependencies]
dev = [
  "ruff>=0.3.2",
  "codespell[toml]>=2.2.6",
  "isort>=5.13.2",
  "nbxmpp @ git+https://dev.gajim.org/gajim/python-nbxmpp.git",
  "PyGObject-stubs @ git+https://github.com/pygobject/pygobject-stubs.git",
  "python-gitlab",
  "sentry-sdk",
]

[project.scripts]
gajim-remote = "gajim.remote:run"

[project.gui-scripts]
gajim = "gajim.main:run"

[tool.setuptools.packages.find]
include = ["gajim*"]

[tool.setuptools.package-data]
gajim = ["py.typed"]
"gajim.data" = ["**/*"]

[tool.setuptools.dynamic]
version = {attr = "gajim.__version__"}

[tool.black]
line-length = 88
skip-string-normalization = true
target-version = ["py310", "py311", "py312"]

[tool.codespell]
skip = "*__pycache__*,_build_root,build,dist,test,*.egg-info,.git,*.po,*.pot,*.nsi,*.spec"
ignore-words-list = "claus,pres,ser,trough"

[tool.pyright]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportPropertyTypeMismatch = "error"
reportMissingModuleSource = "none"

exclude = [
  "**/__pycache__",
  ".git",
  ".venv",
  "build",
  "gajim/common/app.py",
  "gajim/common/client.py",
  "gajim/common/config.py",
  "gajim/common/file_props.py",
  "gajim/common/helpers.py",
  "gajim/common/jingle_content.py",
  "gajim/common/jingle_ft.py",
  "gajim/common/jingle_ftstates.py",
  "gajim/common/jingle_rtp.py",
  "gajim/common/jingle_session.py",
  "gajim/common/jingle_transport.py",
  "gajim/common/modules/annotations.py",
  "gajim/common/modules/base.py",
  "gajim/common/modules/bits_of_binary.py",
  "gajim/common/modules/blocking.py",
  "gajim/common/modules/bookmarks.py",
  "gajim/common/modules/bytestream.py",
  "gajim/common/modules/caps.py",
  "gajim/common/modules/carbons.py",
  "gajim/common/modules/chatstates.py",
  "gajim/common/modules/contacts.py",
  "gajim/common/modules/discovery.py",
  "gajim/common/modules/entity_time.py",
  "gajim/common/modules/gateway.py",
  "gajim/common/modules/http_auth.py",
  "gajim/common/modules/httpupload.py",
  "gajim/common/modules/ibb.py",
  "gajim/common/modules/iq.py",
  "gajim/common/modules/jingle.py",
  "gajim/common/modules/last_activity.py",
  "gajim/common/modules/mam.py",
  "gajim/common/modules/message.py",
  "gajim/common/modules/message_util.py",
  "gajim/common/modules/muc.py",
  "gajim/common/modules/omemo.py",
  "gajim/common/modules/ping.py",
  "gajim/common/modules/presence.py",
  "gajim/common/modules/pubsub.py",
  "gajim/common/modules/receipts.py",
  "gajim/common/modules/roster.py",
  "gajim/common/modules/roster_item_exchange.py",
  "gajim/common/modules/search.py",
  "gajim/common/modules/security_labels.py",
  "gajim/common/modules/software_version.py",
  "gajim/common/modules/user_avatar.py",
  "gajim/common/modules/user_location.py",
  "gajim/common/modules/user_nickname.py",
  "gajim/common/modules/user_tune.py",
  "gajim/common/modules/util.py",
  "gajim/common/modules/vcard_avatars.py",
  "gajim/common/multimedia_helpers.py",
  "gajim/common/optparser.py",
  "gajim/common/preview.py",
  "gajim/common/preview_helpers.py",
  "gajim/common/proxy65_manager.py",
  "gajim/common/settings.py",
  "gajim/common/socks5.py",
  "gajim/common/structs.py",
  "gajim/common/types.py",
  "gajim/common/winapi/system_style.py",
  "gajim/gtk/account_wizard.py",
  "gajim/gtk/add_contact.py",
  "gajim/gtk/adhoc.py",
  "gajim/gtk/component_search.py",
  "gajim/gtk/dataform.py",
  "gajim/gtk/discovery.py",
  "gajim/gtk/filetransfer.py",
  "gajim/gtk/groupchat_info.py",
  "gajim/gtk/server_info.py",
  "gajim/gtk/settings.py",
  "gajim/gtk/start_chat.py",
  "gajim/gtk/types.py",
  "gajim/gtk/vcard_grid.py",
  "gajim/gui_interface.py",
  "gajim/plugins/pluginmanager.py",
  "scripts/update_flatpak_manifest.py",
  "test/common/test_uri_util.py",
  "test/dialogs/change_password.py",
  "test/dialogs/dataform.py",
  "test/dialogs/groupchat_info.py",
  "test/gui/test_menus.py",
  "test/gui/test_nick_completion.py",
  "typings/windows_toasts/*",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]

select = [
    "A",     # flake8-builtins
    # "AIR",   # Airflow
    # "ANN",   # flake8-annotations
    # "ARG",   # flake8-unused-arguments
    # "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    # "CPY",   # flake8-copyright
    # "D",     # pydocstyle
    # "DJ",    # flake8-django
    # "DTZ",   # flake8-datetimez
    "E",     # Error
    # "EM",    # flake8-errmsg
    # "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    # "FBT",   # flake8-boolean-trap
    # "FIX",   # flake8-fixme
    # "FLY",   # flynt
    "G",     # flake8-logging-format
    # "I",     # isort
    "ICN",   # flake8-import-conventions
    # "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    # "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    # "NPY",   # NumPy-specific rules
    # "PD",    # pandas-vet
    # "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    # "PT",    # flake8-pytest-style
    # "PTH",   # flake8-use-pathlib
    # "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    # "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    # "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    # "T20",   # flake8-print
    # "TCH",   # flake8-type-checking
    # "TD",    # flake8-todos
    # "TID",   # flake8-tidy-imports
    # "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020
]

ignore = [
  "A003",   # Class attribute is shadowing python builtin
  "B904",   # Within an except clause ..
  "BLE001", # Blind except Exception: statement
  "C901",   # too complex
  "COM812", # Trailing comma missing
  "FBT003", # Boolean positional value in function call
  "N802",   # Function name should be lower case
  "N806",   # Variable should be lower case
  "N817",   # CamelCase imported as acronym
  "N818",   # Exception name should be named with an Error suffix
  "PGH003", # Use specific rule codes when ignoring type issues
  "PLC1901",# Expression can be simplified to x as an empty string is falsey
  "PLR0911",# Too many return statements
  "PLR0912",# Too many branches
  "PLR0913",# Too many arguments to function call
  "PLR0915",# Too many statements
  "PLR2004",# Magic value used in comparison, consider replacing x with a constant variable
  "PLR5501",# Consider using `elif` instead of `else` then `if` to remove one indentation level
  "PLW0603",# Using the global statement to update `x` is discouraged
  "PLW2901",# `for` loop variable `x` overwritten by assignment target
  "RUF001", # AmbiguousUnicodeCharacterString
  "RUF002", # AmbiguousUnicodeCharacterDocstring
  "RUF003", # AmbiguousUnicodeCharacterComment
  "RUF005", # Consider x instead of concatenation
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF100", # Unused `noqa` directive
  "S101",   # Use of `assert` detected
  "S110",   # `try`-`except`-`pass` detected, consider logging the exception
  "S301",   # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
  "S303",   # Use of insecure MD2, MD4, MD5, or SHA1 hash function
  "S310",   # Audit URL open for permitted schemes
  "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S314",   # Using `xml` to parse untrusted data is known to be vulnerable to XML attacks; use `defusedxml` equivalents
  "S324",   # Probable use of insecure hash functions
  "S608",   # Possible SQL injection vector through string-based query construction
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  "SIM105", # Use `contextlib.suppress(Exception)` instead of try-except-pass
  "SIM108", # Use ternary operator
  "SIM114", # Combine `if` branches using logical `or` operator"
  "SIM115", # Use context handler for opening files
  "SIM201", # Use x instead of not x
  "SIM212", # Use `value if value else ''` instead of `'' if not value else value`
  "SIM300", # Yoda conditions are discouraged use x instead
  "UP037",  # Remove quotes from type annotation
]

exclude = [
  ".eggs",
  ".git",
  ".ruff_cache",
  ".venv",
  "build",
  "dist",
  "venv",
  "*.pyi",
  # Code Folders
  "typings",
  "gajim/common/config.py",     # legacy module, will be removed
  "gajim/common/optparser.py",  # legacy module, will be removed
  "gajim/common/socks5.py",     # legacy module, will be removed
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"gajim/common/iana.py" = ["E501"]
"gajim/common/storage/omemo.py" = ["N803"]
"gajim/common/storage/*" = ["E501"]
"gajim/common/modules/chatstates.py" = ["E501"]
"test/*" = ["E402"]
"test/common/test_styling.py" = ["RUF001", "E501"]
"test/common/test_regex.py" = ["RUF001"]
"test/database/*" = ["E501"]
"pep517build/*" = ["S603", "S607"]
"mac/*" = ["S603", "S607"]
"win/*" = ["S603", "S607"]
"scripts/*" = ["S603", "S607"]
"launch.py" = ["S603", "S607"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
docstring-quotes = "single"
multiline-quotes = "single"

[tool.isort]
force_alphabetical_sort_within_sections = true
force_single_line = true
group_by_package = true
known_typing = ["typing"]
known_gtk = ["gajim.gtk"]
sections = [
  "FUTURE",
  "TYPING",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "GTK",
  "LOCALFOLDER"
]
skip_gitignore = true
